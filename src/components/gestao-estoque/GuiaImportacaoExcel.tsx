import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { FileSpreadsheet, Download, AlertTriangle, CheckCircle } from 'lucide-react';
import { Button } from '@/components/ui/button';
import * as XLSX from 'xlsx';

export const GuiaImportacaoExcel = () => {
  
  // Fun√ß√£o para gerar arquivo Excel modelo
  const gerarArquivoModelo = () => {
    const headers = [
      'codigoBarras',
      'nome',
      'origem',
      'caixaOrganizador',
      'localizacao',
      'responsavel',
      'marca',
      'categoria',
      'subcategoria',
      'subDestino',
      'tipoServico',
      'quantidade',
      'quantidadeMinima',
      'unidade',
      'condicao',
      'especificacao',
      'metragem',
      'peso',
      'comprimentoLixa',
      'polaridadeDisjuntor'
    ];

    const exemploData = [
      [
        '7891234567890',
        'Cabo Flex√≠vel 2,5mm',
        'Fornecedor ABC',
        'Caixa 01',
        'Estante A - Prateleira 2',
        'Jo√£o Silva',
        'Furukawa',
        'Cabos',
        'Cabos Flex√≠veis',
        'Estoque Principal',
        'Instala√ß√£o El√©trica',
        100,
        10,
        'metro',
        'Novo',
        'Cabo flex√≠vel 2,5mm¬≤ isola√ß√£o 750V',
        100,
        '',
        '',
        ''
      ],
      [
        '7891234567891',
        'Disjuntor Bipolar 32A',
        'Nota Fiscal 12345',
        'Gaveta 03',
        'Arm√°rio Disjuntores',
        'Maria Santos',
        'Schneider',
        'Prote√ß√£o',
        'Disjuntores',
        'Estoque Obra',
        'Quadro El√©trico',
        5,
        2,
        'pe√ßa',
        'Novo',
        'Disjuntor bipolar 32A curva C',
        '',
        0.2,
        '',
        'Bipolar'
      ],
      [
        '7891234567892',
        'Lixa d\'√°gua #220',
        'Compra Direta',
        'Prateleira B',
        '√Årea Acabamento',
        'Pedro Costa',
        'Norton',
        'Ferramentas',
        'Abrasivos',
        'Estoque Geral',
        'Acabamento',
        50,
        5,
        'folha',
        'Novo',
        'Lixa d\'√°gua granula√ß√£o 220',
        '',
        '',
        23,
        ''
      ]
    ];

    // Criar workbook e worksheet
    const workbook = XLSX.utils.book_new();
    const worksheetData = [headers, ...exemploData];
    const worksheet = XLSX.utils.aoa_to_sheet(worksheetData);

    // Definir larguras das colunas
    const colWidths = [
      { wch: 15 }, // codigoBarras
      { wch: 25 }, // nome
      { wch: 20 }, // origem
      { wch: 15 }, // caixaOrganizador
      { wch: 25 }, // localizacao
      { wch: 15 }, // responsavel
      { wch: 15 }, // marca
      { wch: 15 }, // categoria
      { wch: 18 }, // subcategoria
      { wch: 18 }, // subDestino
      { wch: 18 }, // tipoServico
      { wch: 12 }, // quantidade
      { wch: 15 }, // quantidadeMinima
      { wch: 10 }, // unidade
      { wch: 10 }, // condicao
      { wch: 35 }, // especificacao
      { wch: 12 }, // metragem
      { wch: 8 },  // peso
      { wch: 15 }, // comprimentoLixa
      { wch: 18 }  // polaridadeDisjuntor
    ];
    worksheet['!cols'] = colWidths;

    // Estilizar cabe√ßalho
    const headerRange = XLSX.utils.decode_range(worksheet['!ref'] || 'A1');
    for (let col = headerRange.s.c; col <= headerRange.e.c; col++) {
      const cellAddress = XLSX.utils.encode_cell({ r: 0, c: col });
      if (!worksheet[cellAddress]) continue;
      worksheet[cellAddress].s = {
        font: { bold: true, color: { rgb: "FFFFFF" } },
        fill: { fgColor: { rgb: "366092" } },
        alignment: { horizontal: "center" }
      };
    }

    // Adicionar worksheet ao workbook
    XLSX.utils.book_append_sheet(workbook, worksheet, "Modelo Importa√ß√£o");

    // Salvar arquivo
    XLSX.writeFile(workbook, 'modelo-importacao-estoque.xlsx');
  };

  const camposObrigatorios = [
    { campo: 'codigoBarras', descricao: 'C√≥digo √∫nico do item (deve ser √∫nico no sistema)' },
    { campo: 'nome', descricao: 'Nome do produto' },
    { campo: 'responsavel', descricao: 'Nome do respons√°vel pelo cadastro' },
    { campo: 'quantidade', descricao: 'Quantidade inicial (n√∫mero)' },
    { campo: 'unidade', descricao: 'Unidade de medida (metro, pe√ßa, kg, etc.)' }
  ];

  const camposOpcionais = [
    { campo: 'origem', descricao: 'Fornecedor, nota fiscal, origem do item' },
    { campo: 'caixaOrganizador', descricao: 'Caixa, gaveta ou organizador onde est√° guardado' },
    { campo: 'localizacao', descricao: 'Localiza√ß√£o f√≠sica do item' },
    { campo: 'marca', descricao: 'Marca do produto' },
    { campo: 'categoria', descricao: 'Categoria principal do item' },
    { campo: 'subcategoria', descricao: 'Subcategoria do item' },
    { campo: 'subDestino', descricao: 'Sub destino/estoque de destino' },
    { campo: 'tipoServico', descricao: 'Tipo de servi√ßo onde ser√° usado' },
    { campo: 'quantidadeMinima', descricao: 'Quantidade m√≠nima para alerta (n√∫mero)' },
    { campo: 'condicao', descricao: 'Novo, Usado, Defeito ou Descarte' },
    { campo: 'especificacao', descricao: 'Especifica√ß√µes t√©cnicas detalhadas' },
    { campo: 'metragem', descricao: 'Metragem (para cabos) - n√∫mero' },
    { campo: 'peso', descricao: 'Peso do item - n√∫mero' },
    { campo: 'comprimentoLixa', descricao: 'Comprimento da lixa - n√∫mero' },
    { campo: 'polaridadeDisjuntor', descricao: 'Polaridade do disjuntor (Monopolar, Bipolar, Tripolar)' }
  ];

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FileSpreadsheet className="h-5 w-5" />
            Guia de Importa√ß√£o Excel/CSV
          </CardTitle>
          <CardDescription>
            Como preparar seu arquivo Excel ou CSV para importa√ß√£o em lote
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          
          {/* Bot√£o para baixar modelo */}
          <div className="flex justify-center">
            <Button onClick={gerarArquivoModelo} className="flex items-center gap-2">
              <Download className="h-4 w-4" />
              Baixar Arquivo Modelo Excel (.xlsx)
            </Button>
          </div>

          {/* Alertas importantes */}
          <div className="space-y-4">
            <Alert>
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>
                <strong>Importante:</strong> O arquivo deve estar no formato Excel (.xlsx) ou CSV (separado por v√≠rgulas). 
                Certifique-se de que os nomes das colunas est√£o exatamente como especificado.
              </AlertDescription>
            </Alert>

            <Alert>
              <CheckCircle className="h-4 w-4" />
              <AlertDescription>
                <strong>Dica:</strong> Baixe o arquivo modelo Excel acima para ter a estrutura correta. 
                Ele j√° vem com exemplos de dados e formata√ß√£o adequada para orientar o preenchimento.
              </AlertDescription>
            </Alert>
          </div>

          {/* Campos obrigat√≥rios */}
          <div>
            <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
              <Badge variant="destructive">Obrigat√≥rio</Badge>
              Campos Obrigat√≥rios
            </h3>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Campo</TableHead>
                  <TableHead>Descri√ß√£o</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {camposObrigatorios.map((campo, index) => (
                  <TableRow key={index}>
                    <TableCell className="font-mono bg-muted/50">{campo.campo}</TableCell>
                    <TableCell>{campo.descricao}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>

          {/* Campos opcionais */}
          <div>
            <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
              <Badge variant="secondary">Opcional</Badge>
              Campos Opcionais
            </h3>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Campo</TableHead>
                  <TableHead>Descri√ß√£o</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {camposOpcionais.map((campo, index) => (
                  <TableRow key={index}>
                    <TableCell className="font-mono bg-muted/50">{campo.campo}</TableCell>
                    <TableCell>{campo.descricao}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>

          {/* Regras importantes */}
          <Card className="bg-blue-50 border-blue-200">
            <CardHeader>
              <CardTitle className="text-blue-800">üìã Regras Importantes</CardTitle>
            </CardHeader>
            <CardContent className="text-blue-700 space-y-2">
              <ul className="space-y-2">
                <li>‚Ä¢ <strong>C√≥digos √∫nicos:</strong> Cada codigoBarras deve ser √∫nico no sistema</li>
                <li>‚Ä¢ <strong>N√∫meros:</strong> Campos como quantidade, quantidadeMinima, metragem e peso devem conter apenas n√∫meros</li>
                <li>‚Ä¢ <strong>Condi√ß√£o:</strong> Valores aceitos: "Novo", "Usado", "Defeito", "Descarte"</li>
                <li>‚Ä¢ <strong>Primeira linha:</strong> Deve conter os nomes dos campos (cabe√ßalho)</li>
                <li>‚Ä¢ <strong>Codifica√ß√£o:</strong> Salve o arquivo com codifica√ß√£o UTF-8 para caracteres especiais</li>
                <li>‚Ä¢ <strong>Aspas:</strong> Textos com v√≠rgulas devem estar entre aspas duplas</li>
              </ul>
            </CardContent>
          </Card>

          {/* Exemplo de linha */}
          <div>
            <h3 className="text-lg font-semibold mb-3">üí° Exemplo de Linha Completa</h3>
            <div className="bg-gray-100 p-4 rounded-lg font-mono text-sm overflow-x-auto">
              <p className="text-gray-600 mb-2">// Cabe√ßalho (primeira linha)</p>
              <p className="mb-4">codigoBarras,nome,origem,caixaOrganizador,localizacao,responsavel,marca,categoria,subcategoria,subDestino,tipoServico,quantidade,quantidadeMinima,unidade,condicao,especificacao,metragem,peso,comprimentoLixa,polaridadeDisjuntor</p>
              
              <p className="text-gray-600 mb-2">// Exemplo de dados (segunda linha em diante)</p>
              <p>"7891234567890","Cabo Flex√≠vel 2,5mm","Fornecedor ABC","Caixa 01","Estante A - Prateleira 2","Jo√£o Silva","Furukawa","Cabos","Cabos Flex√≠veis","Estoque Principal","Instala√ß√£o El√©trica","100","10","metro","Novo","Cabo flex√≠vel 2,5mm¬≤ isola√ß√£o 750V","100","","",""</p>
            </div>
          </div>

        </CardContent>
      </Card>
    </div>
  );
};